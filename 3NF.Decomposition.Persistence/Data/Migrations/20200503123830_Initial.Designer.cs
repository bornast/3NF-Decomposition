// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _3NF.Decomposition.Persistance.Data;

namespace _3NF.Decomposition.Persistance.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200503123830_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("_3NF.Decomposition.Core.Entities.FminMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RelationId")
                        .HasColumnType("int");

                    b.Property<int>("LeftSideMemberId")
                        .HasColumnType("int");

                    b.Property<int>("RightSideMemberId")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id", "RelationId", "LeftSideMemberId", "RightSideMemberId", "Sequence");

                    b.HasIndex("LeftSideMemberId");

                    b.HasIndex("RelationId");

                    b.HasIndex("RightSideMemberId");

                    b.ToTable("FminMembers");
                });

            modelBuilder.Entity("_3NF.Decomposition.Core.Entities.Key", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RelationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RelationId");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("_3NF.Decomposition.Core.Entities.KeyMember", b =>
                {
                    b.Property<int>("KeyId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("KeyId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("KeyMembers");
                });

            modelBuilder.Entity("_3NF.Decomposition.Core.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RelationId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("_3NF.Decomposition.Core.Entities.Relation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("_3NF.Decomposition.Core.Entities.FminMember", b =>
                {
                    b.HasOne("_3NF.Decomposition.Core.Entities.Member", "LeftSideMember")
                        .WithMany()
                        .HasForeignKey("LeftSideMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_3NF.Decomposition.Core.Entities.Relation", "Relation")
                        .WithMany("FminMembers")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_3NF.Decomposition.Core.Entities.Member", "RightSideMember")
                        .WithMany()
                        .HasForeignKey("RightSideMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("_3NF.Decomposition.Core.Entities.Key", b =>
                {
                    b.HasOne("_3NF.Decomposition.Core.Entities.Relation", "Relation")
                        .WithMany("Keys")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_3NF.Decomposition.Core.Entities.KeyMember", b =>
                {
                    b.HasOne("_3NF.Decomposition.Core.Entities.Key", "Key")
                        .WithMany("KeyMembers")
                        .HasForeignKey("KeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_3NF.Decomposition.Core.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("_3NF.Decomposition.Core.Entities.Member", b =>
                {
                    b.HasOne("_3NF.Decomposition.Core.Entities.Relation", "Relation")
                        .WithMany("Members")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
